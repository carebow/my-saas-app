import React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';
import { User, Session, AuthError } from '@supabase/supabase-js';
import { supabase } from '@/integrations/supabase/client';

interface AuthContextType {
  user: User | null;
  session: Session | null;
  loading: boolean;
  isAuthenticated: boolean;
  signIn: (email: string, password: string) => Promise<{ error: string | null }>;
  signUp: (email: string, password: string, name: string) => Promise<{ error: string | null }>;
  signOut: () => Promise<void>;
  refreshSession: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within AuthProvider');
  }
  return context;
};

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [session, setSession] = useState<Session | null>(null);
  const [loading, setLoading] = useState(true);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  
  // Use refs to prevent stale closures
  const userRef = useRef<User | null>(null);
  const sessionRef = useRef<Session | null>(null);
  const loadingRef = useRef(true);

  // Update refs when state changes
  useEffect(() => {
    userRef.current = user;
    sessionRef.current = session;
    loadingRef.current = loading;
    setIsAuthenticated(!!user && !!session);
  }, [user, session, loading]);

  // Centralized session management
  const updateAuthState = useCallback((newSession: Session | null, newUser: User | null) => {
    console.log('üîÑ Updating auth state:', {
      hasSession: !!newSession,
      hasUser: !!newUser,
      userEmail: newUser?.email,
      sessionExpires: newSession?.expires_at ? new Date(newSession.expires_at * 1000).toISOString() : 'N/A'
    });

    setSession(newSession);
    setUser(newUser);
    setIsAuthenticated(!!newSession && !!newUser);
    setLoading(false);
  }, []);

  // Check and refresh session
  const refreshSession = useCallback(async () => {
    try {
      console.log('üîÑ Refreshing session...');
      const { data: { session }, error } = await supabase.auth.getSession();
      
      if (error) {
        console.error('‚ùå Session refresh failed:', error);
        updateAuthState(null, null);
        return;
      }

      if (session) {
        // Check if session is expired
        const now = Math.floor(Date.now() / 1000);
        if (session.expires_at && session.expires_at < now) {
          console.log('‚ö†Ô∏è Session expired, attempting refresh...');
          const { data: { session: refreshedSession }, error: refreshError } = await supabase.auth.refreshSession();
          
          if (refreshError || !refreshedSession) {
            console.error('‚ùå Session refresh failed:', refreshError);
            updateAuthState(null, null);
            return;
          }
          
          updateAuthState(refreshedSession, refreshedSession.user);
        } else {
          updateAuthState(session, session.user);
        }
      } else {
        updateAuthState(null, null);
      }
    } catch (error) {
      console.error('‚ùå Session refresh error:', error);
      updateAuthState(null, null);
    }
  }, [updateAuthState]);

  // Initialize authentication
  useEffect(() => {
    let mounted = true;
    let authSubscription: { unsubscribe: () => void } | null = null;

    const initializeAuth = async () => {
      try {
        console.log('üöÄ Initializing authentication...');
        
        // Get initial session
        const { data: { session }, error } = await supabase.auth.getSession();
        
        if (!mounted) return;
        
        if (error) {
          console.error('‚ùå Initial session check failed:', error);
          updateAuthState(null, null);
          return;
        }

        if (session) {
          console.log('‚úÖ Initial session found');
          updateAuthState(session, session.user);
        } else {
          console.log('‚ÑπÔ∏è No initial session found');
          updateAuthState(null, null);
        }

        // Set up auth state listener
        const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {
          if (!mounted) return;
          
          console.log('üîÑ Auth state change:', event, session?.user?.email);
          
          switch (event) {
            case 'SIGNED_IN':
            case 'TOKEN_REFRESHED':
              if (session) {
                console.log('‚úÖ User signed in/token refreshed');
                updateAuthState(session, session.user);
              }
              break;
              
            case 'SIGNED_OUT':
              console.log('üö™ User signed out');
              updateAuthState(null, null);
              break;
              
            case 'USER_UPDATED':
              if (session) {
                console.log('üë§ User updated');
                updateAuthState(session, session.user);
              }
              break;
              
            case 'USER_DELETED':
              console.log('üóëÔ∏è User deleted');
              updateAuthState(null, null);
              break;
              
            default:
              if (session) {
                console.log('‚ÑπÔ∏è Other auth event with session');
                updateAuthState(session, session.user);
              } else {
                updateAuthState(null, null);
              }
          }
        });

        authSubscription = subscription;
      } catch (error) {
        if (!mounted) return;
        console.error('‚ùå Auth initialization failed:', error);
        updateAuthState(null, null);
      }
    };

    initializeAuth();

    // Cleanup function
    return () => {
      mounted = false;
      if (authSubscription) {
        authSubscription.unsubscribe();
      }
    };
  }, [updateAuthState]);

  // Auto-refresh session before expiration
  useEffect(() => {
    if (!session?.expires_at) return;

    const now = Math.floor(Date.now() / 1000);
    const timeUntilExpiry = session.expires_at - now;
    const refreshTime = Math.max(timeUntilExpiry - 300, 60); // Refresh 5 minutes before expiry, minimum 1 minute

    console.log(`‚è∞ Session expires in ${timeUntilExpiry}s, will refresh in ${refreshTime}s`);

    const refreshTimer = setTimeout(() => {
      refreshSession();
    }, refreshTime * 1000);

    return () => clearTimeout(refreshTimer);
  }, [session?.expires_at, refreshSession]);

  const signIn = useCallback(async (email: string, password: string) => {
    try {
      console.log('üîë Attempting sign in for:', email);
      setLoading(true);
      
      const { data, error } = await supabase.auth.signInWithPassword({ email, password });
      
      if (error) {
        console.error('‚ùå Sign in failed:', error.message);
        setLoading(false);
        return { error: error.message };
      }

      if (data.session && data.user) {
        console.log('‚úÖ Sign in successful');
        updateAuthState(data.session, data.user);
        return { error: null };
      } else {
        console.error('‚ùå Sign in response missing session or user');
        setLoading(false);
        return { error: 'Sign in failed - invalid response' };
      }
    } catch (error: unknown) {
      console.error('‚ùå Sign in error:', error);
      setLoading(false);
      return { error: error instanceof Error ? error.message : 'Sign in failed' };
    }
  }, [updateAuthState]);

  const signUp = useCallback(async (email: string, password: string, name: string) => {
    try {
      console.log('üìù Attempting sign up for:', email);
      setLoading(true);
      
      const { error } = await supabase.auth.signUp({
        email,
        password,
        options: { 
          data: { name },
          emailRedirectTo: `${window.location.origin}/auth`
        }
      });
      
      if (error) {
        console.error('‚ùå Sign up failed:', error.message);
        setLoading(false);
        return { error: error.message };
      }

      console.log('‚úÖ Sign up successful');
      setLoading(false);
      return { error: null };
    } catch (error: unknown) {
      console.error('‚ùå Sign up error:', error);
      setLoading(false);
      return { error: error instanceof Error ? error.message : 'Sign up failed' };
    }
  }, []);

  const signOut = useCallback(async () => {
    try {
      console.log('üö™ Signing out user');
      setLoading(true);
      
      await supabase.auth.signOut();
      
      console.log('‚úÖ Sign out successful');
      updateAuthState(null, null);
    } catch (error) {
      console.error('‚ùå Sign out failed:', error);
      setLoading(false);
      // Force clear state even if signOut fails
      updateAuthState(null, null);
    }
  }, [updateAuthState]);

  const value = {
    user,
    session,
    loading,
    isAuthenticated,
    signIn,
    signUp,
    signOut,
    refreshSession,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};